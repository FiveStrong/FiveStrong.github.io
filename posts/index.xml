<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on My New Hugo Site</title>
    <link>http://linuxfunk.com/posts/</link>
    <description>Recent content in Posts on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 28 Apr 2018 14:08:45 +0000</lastBuildDate>
    
	<atom:link href="http://linuxfunk.com/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>CentOS 7 编译安装nginx并启用TLS1.3</title>
      <link>http://linuxfunk.com/posts/centos-7-%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85nginx%E5%B9%B6%E5%90%AF%E7%94%A8tls1-3/</link>
      <pubDate>Sat, 28 Apr 2018 14:08:45 +0000</pubDate>
      
      <guid>http://linuxfunk.com/posts/centos-7-%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85nginx%E5%B9%B6%E5%90%AF%E7%94%A8tls1-3/</guid>
      <description>### 更新日志 20180428 记录LNMP的CentOS 7 系统上启用TLSv1.3的过程。 20180411 Firefox Nightly 61.0a1支持tls1.3 Draft 26(然而测试并不成功)。 20180404 IESG批准将TLS 1.3 Draft 28作为TLS version 1.3 的建议标准； 至20180404，Openssl支持的标准为Draft 26。 20180312 Chrome 65正式版已经发布，支持tls1.3 Draft 23。  1 升级系统 yum update  升级后的系统版本为：
cat /etc/centos-release CentOS Linux release 7.4.1708 (Core)  2 安装官方mainline版的nginx 通过官方源安装nginx的目的是： 自动生成nginx的配置文件，减少大量的工作； 获取nginx的编译参数。  配置源：
vi /etc/yum.repos.d/nginx.repo 写入如下内容： [nginx] name=nginx repo baseurl=http://nginx.org/packages/mainline/centos/7/$basearch/ gpgcheck=0 enabled=1  安装nginx：
yum install nginx -y  查看nginx版本(可能未及时更新到最新版)：
nginx -v nginx version: nginx/1.</description>
    </item>
    
    <item>
      <title>用git hooks将静态文件部署到VPS</title>
      <link>http://linuxfunk.com/posts/%E7%94%A8git-hooks%E5%B0%86%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6%E9%83%A8%E7%BD%B2%E5%88%B0vps/</link>
      <pubDate>Fri, 03 Nov 2017 15:56:46 +0000</pubDate>
      
      <guid>http://linuxfunk.com/posts/%E7%94%A8git-hooks%E5%B0%86%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6%E9%83%A8%E7%BD%B2%E5%88%B0vps/</guid>
      <description>Hexo 静态部署博客默认使用的是github提供的gitpages,如果你有自己的域名以及VPS的话，可以将博客同步一份到主机上并且在gitpage上保留一份副本。 下面简单介绍一下通过git hook,同步文章的部署步骤，这样以后更换写作平台，以及VPS主机平台都方便回来查找。
使用SSH密钥登录远程VPS 看.ssh目录下有没有，没有的话生成:
ssh-keygen -t rsa -C &amp;quot;你的邮箱或者任何字符串&amp;quot;  利用ssh-copy-id 复制到远程主机
ssh-copy-id -i .ssh/id_rsa.pub root@ip -p 22  如果换了ssh端口的话，post的时候会报错，可以在.ssh/下写入配置
vim .ssh/config Host HOST_ALIAS # 用于 SSH 连接的别名，最好与 HostName 保持一致，都用ip或者都用域名 HostName SERVER_DOMAIN # 服务器的域名或 IP 地址 Port SERVER_PORT # 服务器的端口号，默认为 22，可选 User SERVER_USER # 服务器的用户名 PreferredAuthentications publickey IdentityFile ~/.ssh/id_rsa # 本机上存放的私钥路径  在远程主机配置git仓库 比如在root目录下生成blog.git,并编辑post-receive(没有的话生成一个)
git init --bare blog.git cd blog.git、hooks vim post-receive  直接删除原来,静态目录，把新的clone过去
#!/bin/bash rm -rf /var/www/blog git clone /root/blog.</description>
    </item>
    
    <item>
      <title>Github分支备份Hexo博客源文件</title>
      <link>http://linuxfunk.com/posts/github%E5%88%86%E6%94%AF%E5%A4%87%E4%BB%BDhexo%E5%8D%9A%E5%AE%A2%E6%BA%90%E6%96%87%E4%BB%B6/</link>
      <pubDate>Wed, 01 Nov 2017 12:22:52 +0000</pubDate>
      
      <guid>http://linuxfunk.com/posts/github%E5%88%86%E6%94%AF%E5%A4%87%E4%BB%BDhexo%E5%8D%9A%E5%AE%A2%E6%BA%90%E6%96%87%E4%BB%B6/</guid>
      <description>需求 将hexo部署在GitHub Pages上，但仅同步编译好的静态文件，如果想要在多个平台写博客，hexo的源码就需要同步到云端，方便拉取部署。 最简单的方法就是利用博客的 repo 分支（ master 分支的必须用来存放你博客网站文件）托管 Hexo 源文件和配置达到备份的目的。
将博客目录源文件push到repo分支上 # 在博客目录下 git init git add . git commit -m &amp;quot;commit source files&amp;quot; # 将hexo源文件映射到远程repo上 git remote add origin https://github.com/your-name/your-name.github.io.git # 新建分支（hexo静态文件必须使用master） git branch blogSource # 切换分支 git checkout blogSource # 拉取远程代码，将源文件push到分支 git pull origin master git push -u origin blogSource  这里有个小坑，源文件中themes下主题如果是从原作者那里git下来的话，这里是无法提交的，需要使用fork + subtree的方法同步主题，具体可以看 http://w4lle.com/2016/06/06/Hexo-themes/index.html
我嫌麻烦，直接把git下来的next目录下文件复制出来，在themes里面新建文件夹，在博客目录重复进行以上初始化操作即可(感觉可以直接把next下的.git/目录删掉)
更新博客源文件 git add . git commit -m &amp;quot;modify blog&amp;quot; git push --set-upstream origin blogSource //配置push,方便以后直接git push推送 git push #不用上一个步骤的话可直接使用git push -u origin blogSource  在其他机器上使用repo分支上的博客源文件 git clone xxxx.</description>
    </item>
    
    <item>
      <title>v2ray实现ws&#43;tls&#43;nginx加密传输</title>
      <link>http://linuxfunk.com/posts/v2ray-ws-tls-nginx%E5%AE%9E%E7%8E%B0%E5%8A%A0%E5%AF%86%E4%BC%A0%E8%BE%93/</link>
      <pubDate>Tue, 31 Oct 2017 14:29:14 +0000</pubDate>
      
      <guid>http://linuxfunk.com/posts/v2ray-ws-tls-nginx%E5%AE%9E%E7%8E%B0%E5%8A%A0%E5%AF%86%E4%BC%A0%E8%BE%93/</guid>
      <description>1.V2Ray加密tls原理 别的代理都是直接客户端穿墙使用TCP、HTTP或自定义协议和墙外的服务器连接。 V2Ray的这套方案则是在墙外做一个启用HTTPS的Nginx服务，使用本地的客户端和墙外的Nginx以WS协议进行连接（这就和一个真正的网站行为一模一样了）。然后在Nginx背后用代理进行内容的访问。 这样的解决方案墙是无法分辨到底是一个代理服务器还是一个正常用户在用HTTPS访问网站，HTTPS也保证了墙无法探知流量的内容。
2.安装 2.1 安装v2ray centos7以及其他支持系统可以直接使用官方一键安装脚本
bash &amp;lt;(curl -L -s https://install.direct/go.sh)  安装信息:
bin命令：/usr/bin/v2ray/v2ray 配置文件：/etc/v2ray/config.json service：/lib/systemd/system/v2ray.service 日志指定是放在配置文件里的：log.access 和 log.error，一般放在：/var/log/v2ray/access.log 和 /var/log/v2ray/error.log  2.2 安装nginx yum install nginx  nginx配置信息
配置路径：/etc/nginx html路径：/usr/share/nginx/html/ #这里改成了常用的/var/www/html 日志：/var/log/nginx  2.3 安装证书 使用 TLS 需要证书，证书也有免费付费的，同样的这里使用免费证书，证书认证机构为 Let&amp;rsquo;s Encrypt。 证书的生成有许多方法，这里使用的是比较简单的方法：使用 acme.sh 脚本生成. 前提：一定要有效域名并且指向了VPS地址，否则证书解析会报错。
curl https://get.acme.sh | sh  如果安装报错，那么可能是因为系统缺少 acme.sh 所需要的依赖项，根据提示安装依赖之后然后重新安装一遍 acme.sh
证书生成 acme.sh --issue -d mydomain.com --standalone -k ec-256 # 以上的命令会临时监听 80 端口，请确保执行该命令前 80 端口没有使用，采用了ECC证书 证书强制更新 # sudo ~/.</description>
    </item>
    
    <item>
      <title>使用docker服务配置Zabbix&#43;Grafana监控</title>
      <link>http://linuxfunk.com/posts/%E4%BD%BF%E7%94%A8docker%E6%9C%8D%E5%8A%A1%E9%85%8D%E7%BD%AEzabbix-grafana%E7%9B%91%E6%8E%A7/</link>
      <pubDate>Mon, 30 Oct 2017 12:20:08 +0000</pubDate>
      
      <guid>http://linuxfunk.com/posts/%E4%BD%BF%E7%94%A8docker%E6%9C%8D%E5%8A%A1%E9%85%8D%E7%BD%AEzabbix-grafana%E7%9B%91%E6%8E%A7/</guid>
      <description>纯命令行启动
1. Start empty MySQL server instance docker run --name zabbix-mysql -t \ --restart=always \ -e MYSQL_DATABASE=&amp;quot;zabbix&amp;quot; \ -e MYSQL_USER=&amp;quot;zabbix&amp;quot; \ -e MYSQL_PASSWORD=&amp;quot;zabbix_pwd&amp;quot; \ -e MYSQL_ROOT_PASSWORD=&amp;quot;root_pwd&amp;quot; \ -d mysql:5.7 \ --character-set-server=utf8 --collation-server=utf8_bin 2. Start Zabbix server instance and link the instance with created MySQL server instance docker run --name zabbix-server -t \ --restart=always \ -e DB_SERVER_HOST=&amp;quot;zabbix-mysql&amp;quot; \ -e MYSQL_DATABASE=&amp;quot;zabbix&amp;quot; \ -e MYSQL_USER=&amp;quot;zabbix&amp;quot; \ -e MYSQL_PASSWORD=&amp;quot;zabbix_pwd&amp;quot; \ -e MYSQL_ROOT_PASSWORD=&amp;quot;root_pwd&amp;quot; \ --link zabbix-mysql:zabbix-mysql \ -p 10051:10051 \ -d zabbix/zabbix-server-mysql 3.</description>
    </item>
    
    <item>
      <title>gitlab 通过docker镜像迁移升级</title>
      <link>http://linuxfunk.com/posts/gitlab-%E9%80%9A%E8%BF%87docker%E9%95%9C%E5%83%8F%E8%BF%81%E7%A7%BB%E5%8D%87%E7%BA%A7/</link>
      <pubDate>Mon, 30 Oct 2017 12:18:13 +0000</pubDate>
      
      <guid>http://linuxfunk.com/posts/gitlab-%E9%80%9A%E8%BF%87docker%E9%95%9C%E5%83%8F%E8%BF%81%E7%A7%BB%E5%8D%87%E7%BA%A7/</guid>
      <description>迁移版本: 旧gitlab(8.8.3) CentOS 6.8 新gitlab(9.5.5) postgresql(9.6) redis(2.8.4) CentOS 7.4
目录规划：
总目录：/home/data docker-compose配置文件：/home/data/docker-compose.yml docker数据：/home/data/gitlab/gitlab postgresql数据：/home/data/gitlab/postgresql redis数据：/home/data/gitlab/redis  一、基本环境准备 关闭SELinux
setenforce 0 #即时生效 vim /etc/selinux/config “SELINUX=enforcing”修改为“SELINUX=disabled” #重启后生效 &amp;quot;&amp;quot;  二、安装 1.docker安装
#官方一键安装脚本 curl -sSL https://get.docker.com | sh #启动docker systemctl start docker #加入开机启动docker systemctl enable docker  2.docker-compose安装
curl -L https://github.com/docker/compose/releases/download/1.16.1/docker-compose-`uname -s`-`uname -m` &amp;gt; /usr/local/bin/docker-compose chmod +x /usr/local/bin/docker-compose  3.docker镜像
#因为迁移和升级是两个部分，所有需要pull两个版本，gitlab（https://github.com/sameersbn/docker-gitlab） docker pull sameersbn/gitlab:8.8.3 docker pull sameersbn/gitlab:9.5.5 #redis（https://github.com/sameersbn/docker-redis） docker pull sameersbn/redis #postgresql（https://github.com/sameersbn/docker-postgresql） docker pull sameersbn/postgresql:9.</description>
    </item>
    
    <item>
      <title>Docker 容器管理</title>
      <link>http://linuxfunk.com/posts/docker-%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/</link>
      <pubDate>Mon, 30 Oct 2017 12:17:03 +0000</pubDate>
      
      <guid>http://linuxfunk.com/posts/docker-%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86/</guid>
      <description>1.基础命令 docker container ls -a #查看所有容器 docker container attach nginx-test #连接到容器，显示输出，ctrl+c退出，容器也会停止。 docker container start nginx-test #重启容器 docker container attach --sig-proxy=false nginx-test #同样为连接到容器，这次退出后容器不会停止。 docker container exec nginx-test cat /etc/debian_version #在容器内执行命令 docker container exec -i -t nginx-test /bin/bash #在容器中开启bash进程，并显示输入输出，其中-i --interactive(交互) -t --tty(终端) docker container logs --tail 5 nginx-test #查看最新生成的5条日志 docker container logs -f nginx-test #查看实时目录 -f --follow docker container logs --since 2017-09-12T06:00 nginx-test #查看从６点开始的日志 docker container exec nginx-test date #查看容器内时间 docker container top nginx-test #列出当前容器内进程 docker container stats nginx-test #列出所有容器实时资源占用情况 docker container run -d --name nginx-test --cpu-shares 512 --memory 128M -p 8080:80 nginx docker container inspect nginx-test | grep -i memory #查看配置文件 for i in {1.</description>
    </item>
    
    <item>
      <title>创建Docker容器镜像</title>
      <link>http://linuxfunk.com/posts/%E5%88%9B%E5%BB%BAdocker%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F/</link>
      <pubDate>Mon, 30 Oct 2017 12:10:15 +0000</pubDate>
      
      <guid>http://linuxfunk.com/posts/%E5%88%9B%E5%BB%BAdocker%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F/</guid>
      <description>1.Dockerfile Dockerfile 是用户定义的一系列用来生成容器镜像的文件，通过执行来构建镜像
docker image build xxx.xx  一个Dockerfile 大概内容如下, 几遍你对dockerfile一无所知，也大概能看懂这个配置文件：
FROM alpine:latest LABEL maintainer=&amp;quot;Russ McKendrick &amp;lt;russ@mckendrick.io&amp;gt;&amp;quot; LABEL description=&amp;quot;This example Dockerfile installs NGINX.&amp;quot; RUN apk add --update nginx &amp;amp;&amp;amp; \ rm -rf /var/cache/apk/* &amp;amp;&amp;amp; \ mkdir -p /tmp/nginx/ COPY files/nginx.conf /etc/nginx/nginx.conf COPY files/default.conf /etc/nginx/conf.d/default.conf ADD files/html.tar.gz /usr/share/nginx/ EXPOSE 80/tcp ENTRYPOINT [&amp;quot;nginx&amp;quot;] CMD [&amp;quot;-g&amp;quot;, &amp;quot;daemon off;&amp;quot;]  接下来解释一下各个参数的含义：
FROM:指明基础镜像来源，这里使用了alpine linux,alpine:latest分别指明了所用镜像名称以及发布标签。 LABEL:为镜像添加额外的信息。从版本号到描述都可以加。 可以通过docker inspect查看容器标签信息:docker image inspect &amp;lt;IMAGE_ID&amp;gt; RUN:在容器中运行脚本或安装软件等其他命令行操作。 我们也可以用以下命令行来安装软件： RUN apk add --update nginx RUN rm -rf /var/cache/apk/* RUN mkdir -p /tmp/nginx/ 这与文件中的格式相比会在每运行一个命令之后都新建立一层，我们因尽量避免不必要的容器层建立。 COPY AND ADD: 主要区别就是copy单纯的只是copy功能，从本地的files文件夹里面拷贝配置文件到docker镜像内的相录 而ADD命令不仅可以拷贝，也可以自动的将html.</description>
    </item>
    
    <item>
      <title>Docker Basic</title>
      <link>http://linuxfunk.com/posts/docker-basic/</link>
      <pubDate>Mon, 30 Oct 2017 12:07:34 +0000</pubDate>
      
      <guid>http://linuxfunk.com/posts/docker-basic/</guid>
      <description>1. Docker安装 Docker必须要内核版本高于3.10,所以默认的centos6版本过低无法正常运行docker,推荐使用CentOS7或者选择升级内核。 可以使用yum源安装
sudo tee /etc/yum.repos.d/docker.repo &amp;lt;&amp;lt;- &#39;EOF&#39; [dockerrepo] name=Docker Repository baseurl=https://yum.dockerproject.org/repo/main/centos/7/ enabled=1 gpgcheck=1 gpgkey=https://yum.dockerproject.org/gpg EOF sudo yum install docker-engine sudo service docker start  也可以使用以下方法：
curl -sSL https://get.docker.com | sh sudo systemctl start docker  目前最新版为官方17.07 # docker version Client: Version: 17.07.0-ce API version: 1.31 Go version: go1.8.3 Git commit: 8784753 Built: Tue Aug 29 17:42:01 2017 OS/Arch: linux/amd64 Server: Version: 17.07.0-ce API version: 1.31 (minimum version 1.</description>
    </item>
    
    <item>
      <title>zabbix-agent yum install </title>
      <link>http://linuxfunk.com/posts/zabbix-agent-yum-install/</link>
      <pubDate>Tue, 17 Oct 2017 08:39:53 +0000</pubDate>
      
      <guid>http://linuxfunk.com/posts/zabbix-agent-yum-install/</guid>
      <description>Step 1 – Add Required Repository
CentOS/RHEL 7: rpm -Uvh http://repo.zabbix.com/zabbix/3.4/rhel/7/x86_64/zabbix-release-3.4-2.el7.noarch.rpm CentOS/RHEL 6: rpm -Uvh http://repo.zabbix.com/zabbix/3.4/rhel/6/x86_64/zabbix-release-3.4-1.el6.noarch.rpm  Step 2 – Install Zabbix Agent
yum install zabbix-agent  Step 3 – Edit Zabbix Agent Configuration
# vim /etc/zabbix/zabbix_agentd.conf #Server=[zabbix server ip] #Hostname=[ Hostname of client system ] Server=192.168.1.11 Hostname=Server1  Step 4 – Restarting Zabbix Agent
# systemctl restart zabbix-agent  Step 5 – open the firewall port
firewall-cmd --permanent --zone=public --add-port=10050/tcp firewall-cmd --reload firewall-cmd --list-all  </description>
    </item>
    
    <item>
      <title>KVM-从模板镜像克隆虚拟机</title>
      <link>http://linuxfunk.com/posts/kvm-%E4%BB%8E%E6%A8%A1%E6%9D%BF%E9%95%9C%E5%83%8F%E5%85%8B%E9%9A%86%E8%99%9A%E6%8B%9F%E6%9C%BA/</link>
      <pubDate>Mon, 04 Sep 2017 17:18:00 +0000</pubDate>
      
      <guid>http://linuxfunk.com/posts/kvm-%E4%BB%8E%E6%A8%A1%E6%9D%BF%E9%95%9C%E5%83%8F%E5%85%8B%E9%9A%86%E8%99%9A%E6%8B%9F%E6%9C%BA/</guid>
      <description>1.准备工作 克隆虚拟机你需要以下文件: - 一个定义文件（用于描述内存大小，CPUs的个数等等） - 一个镜像模板（以安装好操作系统）
2.创建预定义文件和镜像模板 定义文件为一个xml格式的文件，模板是一个虚拟机disk image.通过以下方法创建:
 创建一个基本的虚拟机并安装好操作系统 关闭该虚拟机
virsh shutdown basevm   导出XML格式文件，并复制基础镜像为template.qcow2
virsh dumpxml basevm &amp;gt; /var/lib/libvirt/images/template.xml cp /var/lib/libvirt/images/basevm.qcow2 /var/lib/libvirt/images/template.qcow2  修改template.xml文件中镜像文件的指定位置
&amp;lt;disk type=&#39;file&#39; device=&#39;disk&#39;&amp;gt; &amp;lt;driver name=&#39;qemu&#39; type=&#39;qcow2&#39; cache=&#39;none&#39;/&amp;gt; &amp;lt;source file=&#39;/var/lib/libvirt/images/template.qcow2&#39;/&amp;gt; &amp;lt;target dev=&#39;vda&#39; bus=&#39;virtio&#39;/&amp;gt; &amp;lt;address type=&#39;pci&#39; domain=&#39;0x0000&#39; bus=&#39;0x00&#39; slot=&#39;0x04&#39; function=&#39;0x0&#39;/&amp;gt; &amp;lt;/disk&amp;gt;  通过 virt-sysprep 命令处理template.qcow2 这将重置镜像并移除SSH kesy, 为网卡创建新的MAC地址，修改udev persistent net rules, 清除log文件等
virt-sysprep -a /var/lib/libvirt/images/template.qcow2  【可选】如果你不再需要basevm，删除它。
virsh undefine basevm rm /var/lib/libvirt/images/basevm.qcow2  3.</description>
    </item>
    
    <item>
      <title>CentOS7 安装配置VNC</title>
      <link>http://linuxfunk.com/posts/centos7-%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEvnc/</link>
      <pubDate>Thu, 31 Aug 2017 13:27:11 +0000</pubDate>
      
      <guid>http://linuxfunk.com/posts/centos7-%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEvnc/</guid>
      <description>1. 安装图形化界面 # yum check-update # yum groupinstall &amp;quot;X Window System&amp;quot; # yum install gnome-classic-session gnome-terminal nautilus-open-terminal control-center liberation-mono-fonts  或者直接
yum groupinstall &amp;quot;GNOME Desktop&amp;quot; &amp;quot;Graphical Administration Tools&amp;quot;  ### 设置默认启动图形界面 # unlink /etc/systemd/system/default.target # ln -sf /lib/systemd/system/graphical.target /etc/systemd/system/default.target # reboot  2.安装 tigervnc server and X11 fonts yum install tigervnc-server xorg-x11-fonts-Type1  拷贝VNC server configuration 文件到 /etc/systemd/system 下进行配置。VNC默认端口为5900，你可以直接通过5900端口登录VNC，也可以自己设置一个子端口。比如，我将子端口设成5，那么登录的端口就是5905,你可以通过ipaddress:sub-port(192.168.1.1:5或者192.168.1.1:5905)来登录。
# cp /lib/systemd/system/vncserver@.service /etc/systemd/system/vncserver@:5.service # vi /etc/systemd/system/vncserver@:5.service  默认配置文件的内容
[Unit] Description=Remote desktop service (VNC) After=syslog.</description>
    </item>
    
    <item>
      <title>zabbix 3 配置邮件报警</title>
      <link>http://linuxfunk.com/posts/zabbix-3-%E9%85%8D%E7%BD%AE%E9%82%AE%E4%BB%B6%E6%8A%A5%E8%AD%A6/</link>
      <pubDate>Wed, 05 Apr 2017 15:58:50 +0000</pubDate>
      
      <guid>http://linuxfunk.com/posts/zabbix-3-%E9%85%8D%E7%BD%AE%E9%82%AE%E4%BB%B6%E6%8A%A5%E8%AD%A6/</guid>
      <description>zabbix 配置邮件报警,其实网上有一堆教程，但是在按着他们的教程配置好了之后，或多或少有些问题，比如邮件发不出去，没内容等等。 我整理了一下自己配置成功之后需要注意的几点。
1. 安装mailx 服务 通过mailx 配置好外部SMTP服务器相关信息发送邮件（这里是配置发信的地址）： yum -y install mailx vim /etc/mail.rc 增加以下内容： set bsdcompat set from=test@163.com smtp=smtp.163.com #这里是邮局服务器和SMTP 服务器信息，这里使用163的，其他邮箱自行修改一下 set smtp-auth-user=test@163.com smtp-auth-password=yourpassword #smtp-auth-user 自然是指邮局用户，需要写完整地址，然后是密码 set smtp-auth=login  使用命令行测试一下是否配置成功 echo “zabbix test mail” | mail -s “zabbix” test@163.com  2.创建示警媒介  进入 【管理】-【示警媒介类型】-【创建媒体类型】 注意我们选择使用脚本方式，名称可自定义，脚本名称设定需要和以后创建的脚本相同，这里还需要添加参数，否则无法接受到系统传递的信息进行发送： {ALERT.SENDTO} {ALERT.SUBJECT} {ALERT.MESSAGE}   2.创建用户接收邮箱： 【管理】-【用户】-选择对应的用户默认Admin -切换到【示警媒介】选项卡-类型处选择为刚才我们创建的示警媒介名称，收件人填写为需要接收邮件的地址 3.创建触发动作： 【组态】-【动作】-【创建动作】 名称：Action-Email 默认接收人：Problem：{TRIGGER.NAME} 默认信息： 告警主机:{HOSTNAME1} 告警时间:{EVENT.DATE} {EVENT.TIME} 告警等级:{TRIGGER.SEVERITY} 告警信息: {TRIGGER.NAME} 告警项目:{TRIGGER.KEY1} 问题详情:{ITEM.NAME}:{ITEM.VALUE} 当前状态:{TRIGGER.STATUS}:{ITEM.VALUE1} 事件ID:{EVENT.ID} 恢复主旨：Recover：{TRIGGER.</description>
    </item>
    
    <item>
      <title>PostgresSQL安装与使用</title>
      <link>http://linuxfunk.com/posts/postgressql%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Thu, 23 Mar 2017 16:30:33 +0000</pubDate>
      
      <guid>http://linuxfunk.com/posts/postgressql%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</guid>
      <description>系统版本 CentOS6.8
安装官方yum源 yum install https://download.postgresql.org/pub/repos/yum/9.6/redhat/rhel-6-x86_64/pgdg-centos96-9.6-3.noarch.rpm #查看postgres版本 yum list postgres*  安装软件 yum install postgresql96-server postgresql96-devel  初始化数据库 service postgresql-9.6 initdb 这里使用默认初始化位置：/var/lib/pgsql/9.6/data/  启动数据库 chkconfig postgresql-9.6 on #设置开机自启动，可选 service postgresql-9.6 start  登录数据库 su postgres psql  创建数据库 CREATE DATABASE villains; CREATE DATABASE villains ENCODING &#39;UTF-8&#39; #指定数据库编码，默认为utf-8  创建用户 CREATE USER batman WITH PASSWORD &#39;Extremly-Secret-Password&#39;; ALTER user postgres with password &#39;foobar&#39;; ＃修改密码  给用户赋予权限 ALTER DATABASE villains owner to batman;　#改变数据库所有者 GRANT ALL PRIVILEGES ON DATABASE villains to batman; GRANT SELECT ON DATABASE villains to alfred; #或者仅赋予部分权限 可选权限如下： SELECT INSERT UPDATE DELETE RULE REFERENCES TRIGGER CREATE TEMPORARY EXECUTE USAGE  可以在创建数据库的时候使用一个命令给予用户(create database, create user and grant all privileges) CREATE DATABASE villains OWNER batman;  查看用户 使用数据库 # \du 查看用户 # \c villains 进入数据库 # \l 查看当前所有数据库  创建表 CREATE TABLE super_villains (id serial PRIMARY KEY, name character varying(100), super_power character varying(100), weakness character varying(100)); CREATE TABLE equipment (id serial PRIMARY KEY, name character varying(100), status character varying(100), special_move character varying(100));  查看表 # \d 查看当前数据库所有表 # \d+ equipment; 查看具体表，以及字段 # SELECT * FROM information_schema.</description>
    </item>
    
    <item>
      <title>MySQL&#43;BIND-dlz 实现智能DNS</title>
      <link>http://linuxfunk.com/posts/mysql-bind-dlz-%E5%AE%9E%E7%8E%B0%E6%99%BA%E8%83%BDdns/</link>
      <pubDate>Fri, 17 Mar 2017 13:12:03 +0000</pubDate>
      
      <guid>http://linuxfunk.com/posts/mysql-bind-dlz-%E5%AE%9E%E7%8E%B0%E6%99%BA%E8%83%BDdns/</guid>
      <description>配置环境 系统：centos 6.8 Mysql: 5.7 BIND: 9.11.0  CentOS6编译环境安装 yum groupinstall &amp;quot;Development Tools&amp;quot; yum install openssl-devel  mysql 安装 这里直接使用官方yum源安装 1. 找对应系统版本的rpm包，https://dev.mysql.com/downloads/repo/yum/ 2. sudo yum localinstall mysql57-community-release-el6-{version-number}.noarch.rpm 3. 查看开启的mysql是哪个版本的yum repolist enabled | grep &amp;quot;mysql.*-community.*&amp;quot; 4. 官方默认5.7直接安装　sudo yum install mysql-community-server mysql-community-devel 5. 启动　sudo service mysqld start 6. 查看状态　sudo service mysqld status 7. 找到临时密码　sudo grep &#39;temporary password&#39; /var/log/mysqld.log 8. 登录并修改密码 mysql -uroot -p ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;MyNewPass4!</description>
    </item>
    
    <item>
      <title>终端利器tmux命令速查</title>
      <link>http://linuxfunk.com/posts/%E7%BB%88%E7%AB%AF%E5%88%A9%E5%99%A8tmux%E5%91%BD%E4%BB%A4%E9%80%9F%E6%9F%A5/</link>
      <pubDate>Tue, 28 Jun 2016 14:19:36 +0000</pubDate>
      
      <guid>http://linuxfunk.com/posts/%E7%BB%88%E7%AB%AF%E5%88%A9%E5%99%A8tmux%E5%91%BD%E4%BB%A4%E9%80%9F%E6%9F%A5/</guid>
      <description>配置文件：https://github.com/gpakosz/.tmux
基本操作： ?	列出所有快捷键；按q返回 d	脱离当前会话,可暂时返回Shell界面，输入tmux attach能够重新进入之前会话 s	选择并切换会话；在同时开启了多个会话时使用 D	选择要脱离的会话；在同时开启了多个会话时使用 :	进入命令行模式；此时可输入支持的命令，例如kill-server所有tmux会话 [	复制模式，光标移动到复制内容位置，空格键开始，方向键选择复制，回车确认，q/Esc退出 ]	进入粘贴模式，粘贴之前复制的内容，按q/Esc退出 ~	列出提示信息缓存；其中包含了之前tmux返回的各种提示信息 t	显示当前的时间 Ctrl+z	挂起当前会话  窗口操作： c	创建新窗口 &amp;amp;	关闭当前窗口 数字键	切换到指定窗口 p	切换至上一窗口 n	切换至下一窗口 l	前后窗口间互相切换 w	通过窗口列表切换窗口 ,	重命名当前窗口，便于识别 .	修改当前窗口编号，相当于重新排序 f	在所有窗口中查找关键词，便于窗口多了切换  面板操作： “	将当前面板上下分屏 %	将当前面板左右分屏 x	关闭当前分屏 !	将当前面板置于新窗口,即新建一个窗口,其中仅包含当前面板 Ctrl+方向键	以1个单元格为单位移动边缘以调整当前面板大小 Alt+方向键	以5个单元格为单位移动边缘以调整当前面板大小 空格键	可以在默认面板布局中切换，试试就知道了 q	显示面板编号 o	选择当前窗口中下一个面板 方向键	移动光标选择对应面板 {	向前置换当前面板 }	向后置换当前面板 Alt+o	逆时针旋转当前窗口的面板 Ctrl+o	顺时针旋转当前窗口的面板 z	tmux 1.</description>
    </item>
    
    <item>
      <title>解决Linux下Sublime text 3的中文输入问题 </title>
      <link>http://linuxfunk.com/posts/%E8%A7%A3%E5%86%B3linux%E4%B8%8Bsublime-text-3%E7%9A%84%E4%B8%AD%E6%96%87%E8%BE%93%E5%85%A5%E9%97%AE%E9%A2%98/</link>
      <pubDate>Sat, 09 Apr 2016 14:14:05 +0000</pubDate>
      
      <guid>http://linuxfunk.com/posts/%E8%A7%A3%E5%86%B3linux%E4%B8%8Bsublime-text-3%E7%9A%84%E4%B8%AD%E6%96%87%E8%BE%93%E5%85%A5%E9%97%AE%E9%A2%98/</guid>
      <description>http://c4fun.cn/blog/2013/11/30/linux-sublimetext-chinese/
搬个链接算了，博主已经写的很详细，就不重复编写了，只是为了留个记录。 基本方法就是这个，个别问题 可以google。
更新方法（编译部分与博主相同，懒得点的看下面） 新建文件sub-fcitx.c，建议放在Sublime Text的所在目录下，将下面的代码复制进去
/*sublime-imfix.cUse LD_PRELOAD to interpose some function to fix sublime input method support for linux.By Cjacker Huang gcc -shared -o libsublime-imfix.so sublime-imfix.c `pkg-config --libs --cflags gtk+-2.0` -fPICLD_PRELOAD=./libsublime-imfix.so subl*/#include &amp;lt;gtk/gtk.h&amp;gt;#include &amp;lt;gdk/gdkx.h&amp;gt;typedef GdkSegment GdkRegionBox; struct _GdkRegion{ long size; long numRects; GdkRegionBox *rects; GdkRegionBox extents;}; GtkIMContext *local_context; voidgdk_region_get_clipbox (const GdkRegion *region, GdkRectangle *rectangle){ g_return_if_fail (region != NULL); g_return_if_fail (rectangle != NULL); rectangle-&amp;gt;x = region-&amp;gt;extents.x1; rectangle-&amp;gt;y = region-&amp;gt;extents.</description>
    </item>
    
    <item>
      <title>pyenv python多版本控制工具</title>
      <link>http://linuxfunk.com/posts/pyenv-python%E5%A4%9A%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%B7%A5%E5%85%B7/</link>
      <pubDate>Fri, 25 Mar 2016 17:04:49 +0000</pubDate>
      
      <guid>http://linuxfunk.com/posts/pyenv-python%E5%A4%9A%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%B7%A5%E5%85%B7/</guid>
      <description>pyenv:一个简单的python版本管理工具，它能够让你改变全局python版本，安装并同时启用多个版本，并且可以创建python虚拟环境virualenv. 它可以在linux和OS X上运行，并且无需root权限。
安装pyenv $ git clone git://github.com/yyuu/pyenv.git ~/.pyenv $ echo &#39;export PYENV_ROOT=&amp;quot;$HOME/.pyenv&amp;quot;&#39; &amp;gt;&amp;gt; ~/.bash_profile $ echo &#39;export PATH=&amp;quot;$PYENV_ROOT/bin:$PATH&amp;quot;&#39; &amp;gt;&amp;gt; ~/.bash_profile $ echo &#39;eval &amp;quot;$(pyenv init -)&amp;quot;&#39; &amp;gt;&amp;gt; ~/.bash_profile $ exec $SHELL  我使用的是zsh，所以将变量导入到 ~/.zshrc 文件而不是~/.bash_profile Ubuntu的用户是 ~/.bashrc
安装Python 查看可安装的版本 $ pyenv install --list  该命令会列出可以用pyenv安装的Python版本，仅列举几个:
2.7.11 # Python 2最新版本 3.5.1 # Python 3最新版本 anaconda2-2.5.0 # 支持Python 2.6和2.7 anaconda3-2.5.0 # 支持Python 5  其中形如 x.x.x 这样的只有版本号的为Python官方版本，其他的形如 xxxxx-x.x.x 这种既有名称又有版本后的属于“衍生版”或发行版。
安装Python的依赖包 因为pyenv是根据源码包进行编译安装，所以可能需要用到一些其他的依赖软件包，已知的一些需要预先安装的库如下。</description>
    </item>
    
    <item>
      <title>iptables防火墙规则实例</title>
      <link>http://linuxfunk.com/posts/iptables%E9%98%B2%E7%81%AB%E5%A2%99%E8%A7%84%E5%88%99%E5%AE%9E%E4%BE%8B/</link>
      <pubDate>Mon, 14 Mar 2016 14:18:35 +0000</pubDate>
      
      <guid>http://linuxfunk.com/posts/iptables%E9%98%B2%E7%81%AB%E5%A2%99%E8%A7%84%E5%88%99%E5%AE%9E%E4%BE%8B/</guid>
      <description>#!/bin/bash # Clear any previous rules. /sbin/iptables -F # Default drop policy. /sbin/iptables -P INPUT DROP /sbin/iptables -P OUTPUT ACCEPT # Allow anything over loopback and vpn. /sbin/iptables -A INPUT -i lo -s 127.0.0.1 -d 127.0.0.1 -j ACCEPT /sbin/iptables -A OUTPUT -o lo -s 127.0.0.1 -d 127.0.0.1 -j ACCEPT /sbin/iptables -A INPUT -i tun0 -j ACCEPT /sbin/iptables -A OUTPUT -o tun0 -j ACCEPT /sbin/iptables -A INPUT -p esp -j ACCEPT /sbin/iptables -A OUTPUT -p esp -j ACCEPT # Drop any tcp packet that does not start a connection with a syn flag.</description>
    </item>
    
    <item>
      <title>DRBD配置与测试</title>
      <link>http://linuxfunk.com/posts/drbd%E9%85%8D%E7%BD%AE%E4%B8%8E%E6%B5%8B%E8%AF%95/</link>
      <pubDate>Wed, 16 Dec 2015 20:41:38 +0000</pubDate>
      
      <guid>http://linuxfunk.com/posts/drbd%E9%85%8D%E7%BD%AE%E4%B8%8E%E6%B5%8B%E8%AF%95/</guid>
      <description>一、软件安装 1.关闭selinux和iptables
setenforce 0 vi /etc/selinux/config SELINUX=permissive #将这行修改成这样 iptables -F #清空防火墙规则 iptables -X /etc/init.d/iptables save  2.下载elrepo源
rpm -Uvh http://www.elrepo.org/elrepo-release-6-6.el6.elrepo.noarch.rpm  3.yum安装DRBD
yum -y install kmod-drbd-83 drbd83  4.加载DRBD模块到内核
moodprobe drbd #如果遇到无法加载模块的情况，重启一下机器试试，因为它升级了内核。 lsmod | grep -i drbd modprobe -l | grep -i drbd #查看drbd.ko安装路径  二、配置DRBD镜像系统 分区
/dev/sdb1 9G /dev/sdb2 1G  #drbd.conf global { usage-count no; } common { syncer {rate 200m; } } resource r0 { protocol C; net { cram-hmac-alg &amp;quot;sha1&amp;quot;; shared-secret &amp;quot;secret_string&amp;quot;; } disk { on-io-error detach; fencing resource-only; } startup { wfc-timeout 120; degr-wfc-timeout 120; } device /dev/drbd0; on lamp01 { address 192.</description>
    </item>
    
    <item>
      <title>NFS服务配置</title>
      <link>http://linuxfunk.com/posts/nfs%E6%9C%8D%E5%8A%A1%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Mon, 02 Nov 2015 21:43:56 +0000</pubDate>
      
      <guid>http://linuxfunk.com/posts/nfs%E6%9C%8D%E5%8A%A1%E9%85%8D%E7%BD%AE/</guid>
      <description>一、NFS的相关概念 NFS（Network File System）即网络文件系统的缩写，由Sun公司研发，其目的是为了解决网络文件共享的问题。用户可以实现像挂载本地文件系统一样挂载NFS服务器的共享目录；其具有配置简单、使用高效的特点，但只能在Linux系统使用，不能跨平台使用。
NFS服务占用2049端口，但其对于不同的功能使用小于1024的随机端口来传输数据，但如果是随机端口客户端如何知晓要访问哪个端口呢？这就要借助于RPC协议了。
RPC（Remote Procedure Call)即远程过程调用，其作用是向客户端告知NFS的端口信息；NFS服务启动时会主动向RPC注册所使用的端口，而RPC使用111端口来响应客户端的请求，所以客户端可以借助于RPC来完成NFS的访问。
二、NFS文件访问权限 NFS服务本身没有身份验证的功能，权限是遵循共享目录在NFS服务器上的权限设置，而且只识别UID和GID。假如现在有一个共享的目录share其属主、属组及权限信息如下： 用户和组为mysql，但当客户端访问此目录时，NFS是判定访问者的uid是否为400，如果uid相符，那么访问者就有可能拥有与mysql用户相同的权限，这还要取决于/share设置共享时所分配的权限；如果访问者的uid对应了NFS服务器上的另一个用户，则访问者就对应拥有other权限，但是否能够完全对应用other权限也要取决于\share的共享权限；如果访问者的uid恰好在NFS服务器上不存在，则服务器用自动将其压缩成为匿名用户，其uid为65534，而CentOS将其显示为nfsnobody。
由于在绝大部分Linux系统中root用户的uid为0，也就是说客户端可以轻易的获得NFS的root权限来访问共享目录，这样是极不安全的，所以NFS默认会将root的身份压缩成匿名用户。
三、NFS服务端的配置 1、安装NFS服务 在安装nfs-utils的同时会安装rpcbind程序。 配置NFS服务 2、 NFS服务使用/etc/exports配置文件进行设置，其语法格式如下： /share：表示共享的文件系统； 192.168.2.0/24：允许连接共享文件系统的客户端； (rw)：客户端对于共享文件系统所拥有的权限； *.test.com(ro)：表示test.com为后缀的主机都可以对/share目录有只读的权限；
3、客户端的设置方式： （1）IP地址，如192.168.2.10； （2）网络地址，如192.168.2.0/24，或192.168.2.0/255.255.255.0； （3）主机名，如client.test.com，也可以使用通配符，“*”或“？”。 常用权限参数： rw：可读可写； ro：只读； root_squash：将root用户压缩成为匿名用户（默认选项）； no_root_squash：访问共享目录时保持root用户身份； all_squash：将所有访问NFS的用户身份全部压缩成为匿名用户； sync：将数据同步写入到内存和硬盘中； async：将数据暂存于内存中。 anonuid：指定匿名访问用户的UID； anongid：指定匿名访问用户组的GID。 更多的参数可自行man exports来进行查阅。
四、启动NFS服务 先要启动rpcbind：service rpcbind start 再启动nfs: service nfs start 查看NFS开启的端口信息： NFS服务本身启动在2049端口，rpcbind启动在111端口。 可以使用rpcinfo命令来查看rpc的相关信息，其格式如下： rpc [option] [IP|hostname] option:
-p：显示所有的port与program信息。 五、NFS的查看命令  下面来介绍两个经常用到的查看命令。 （1）showmount命令 格式：showmount [option] [IP|hostname] option: -a：显示当前主机与客户端的NFS连接共享的状态； -e：显示某台主机的/etc/exports所共享的目录信息。  （2）exportfs命令
 格式：exportfs [option] option:   -a：全部挂载（或卸载）/etc/exports文件中的设置； -r：重新挂载/etc/exports中的设置； -u：卸载某一目录； -v：将命令输出显示到屏幕。 六、NFS客户端设置 六、NFS客户端设置 （1）手动挂载NFS共享目录 （2）开机自动挂载NFS共享目录 1）/etc/fstab _netdev：此选项表示在NFS服务器宕机时，也不会影响本地系统的启动。 2）/etc/rc.</description>
    </item>
    
  </channel>
</rss>